snippet sb3 "Python 3 shebang"
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""${1:File desc.}"""

endsnippet

snippet sb "Python shebang" b
#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""${1:File desc.}"""

endsnippet

snippet main "def main" b
def main():
    """Main function."""
    pass


if __name__ == '__main__':
    main()
endsnippet

snippet if "If" b
if ${1:condition}:
    ${2:${VISUAL:pass}}
endsnippet

snippet ife "If / Else" b
if ${1:condition}:
    ${2:${VISUAL:pass}}
else:
    ${3:pass}
endsnippet

snippet ifee "If / Elif / Else" b
if ${1:condition}:
    ${2:${VISUAL:pass}}
elif ${3:condition}:
    ${4:pass}
else:
    ${5:pass}
endsnippet

snippet class "Class" b
class ${1:ClassName}:
    """${2:Class doc. string.}"""

    def __init__(self):
        """Initialization."""
        pass
endsnippet

snippet method "Class method" b
def ${1:method_name}(self, ${2:arg_0}: ${3:TypeName}) -> ${4:None}:
    """Method doc. string.

    Args:
        ${2:arg_0}: desc. of arg_0.

    Returns:
        Desc. of return.
    """
    pass
endsnippet

snippet static "Class static method" b
@staticmethod
def ${1:method_name}(${2:arg_0}: ${3:TypeName}) -> ${4:None}:
    """Static method doc. string.

    Args:
        ${2:arg_0}: desc. of arg_0.

    Returns:
        Desc. of return.
    """
    pass
endsnippet

snippet classmethod "Class method" b
@classmethod
def ${1:method_name}(cls, ${2:arg_0}: ${3:TypeName}) -> ${4:None}:
    """Class method doc. string.

    Args:
        ${2:arg_0}: desc. of arg_0.

    Returns:
        Desc. of return.
    """
    pass
endsnippet

snippet func "Function without arg and ret" b
def ${1:func_name}(${2:arg_0}: ${3:TypeName}) -> None:
    """${4}"""
    pass
endsnippet

snippet funca "Function with arg" b
def ${1:func_name}(${2:arg_0}: ${3:TypeName}) -> None:
    """${5}

    Args:
        ${2:arg_0}: desc. of arg_0.
    """
    pass
endsnippet

snippet funcr "Function with ret" b
def ${1:func_name}() -> ${2:None}:
    """${3}

    Returns:
        Desc. of return.
    """
    pass
endsnippet

snippet funcar "Function with arg and ret" b
def ${1:func_name}(${2:arg_0}: ${3:TypeName}) -> ${4:None}:
    """${5}

    Args:
        ${2:arg_0}: desc. of arg_0.

    Returns:
        Desc. of return.
    """
    pass
endsnippet

snippet context "context manager methods" b
def __enter__(self):
    ${1:pass}

def __exit__(self, exc_type, exc_value, traceback):
    ${2:pass}
endsnippet

snippet try "Try / Except" b
try:
    ${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
    ${4:raise $3}
endsnippet

snippet trye "Try / Except / Else" b
try:
    ${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
    ${4:raise $3}
else:
    ${5:pass}
endsnippet

snippet tryf "Try / Except / Finally" b
try:
    ${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
    ${4:raise $3}
finally:
    ${5:pass}
endsnippet

snippet tryef "Try / Except / Else / Finally" b
try:
    ${1:${VISUAL:pass}}
except${2: ${3:Exception} as ${4:e}}:
    ${5:raise}
else:
    ${6:pass}
finally:
    ${7:pass}
endsnippet

snippet with "with" b
with ${1:expr}`!p snip.rv = " as " if t[2] else ""`${2:var}:
    ${3:${VISUAL:pass}}
$0
endsnippet

snippet doc "Doc string for funtion and class" b
"""${1:Doc string.}"""
endsnippet

snippet docfa "Doc string for funtion with arg" b
"""${1:Doc string.}

Args:
    ${2:arg_0}: ${3:desc.}
"""
endsnippet

snippet docfr "Doc string for funtion with ret" b
"""${1:Doc string.}

Returns:
    ${2:Desc}
"""
endsnippet

snippet docfar "Doc string for funtion with arg and ret" b
"""${1:Doc string.}

Args:
    ${2:arg_0}: ${3:desc.}

Returns:
    ${2:Desc}
"""
endsnippet
